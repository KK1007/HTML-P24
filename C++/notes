/*

 #include<iostream>
 using namespace std;
int main(){
     int n;
     cout<<"enter the number - ";
     cin>>n;
     cout<<"square of "<< n<<" is = "<<n*n;
 }

           DOCUMENTATION SECTION 
           LINKER/HEADER SECTION* 
           MACRO/DEFINE SECTION
           GLOBAL SECTION
           BODY SECTION*
           SUB PROGRAM
          *(mendatatory section)

 # is known as pound. Also called PREPROSSED DIRECTIVE.

There are six type of programing TOKENS(smallest unit of a program)

 i) Keyword - Reserved words or we can say predefined whic have their own meaning and there are 32keywords

 ii) Operator - (+ - * / ) - it is used to perform the operation on operants.

iii) Symbols - it its used for specific purpose.

 iv) String - it refers text or group of characters.

 v) Constant - whose value or behaviour cant be changed.

 vi) Identifier - it is used to identify the behaviour or the roleof the variable. there may be predefined or user defined identifiers.

 << insertion operator
 >> extration operator

                          DATATYPES

 *Basic data type - Pre-defined / Inbuilt   
    i) integer 
    ii) float 
    iii) char        

 *Derived data type - User defined

 Variables refers the memory address of the identifiers

&a it is used to print address
                 
 while declaring any variables we cant use space, symbols but we can use numbers and underscore.
  we cant start with numbers

  (/*) it is used to comment out whole paragraph or it is used for multi line comment

  => DATATYPES
     i) int - numeric
     ii)float - decimal number2
     iii)char - 'a' 'b'
   \n is called ESCAPE SEQUNECE OPERATOR(new line)
   \t used to give space between two word(TAB)


   => TYPES OF OPERATOR
     It is used to perform any opertion that requires operands(variable)
     There are many types of operator

     i) ARITHEMATIC - (+ - * / %)
           % - it take remainder as final result
           / - it take quoitent as final result

     ii)LOGICAL - There are three types of logical operator
                - AND(&&) It will return TRUE (1) if and only if both conditions are TRUE else it will return FALSE(0) EX:- a = 44 && 9

                - OR(||) - It will return FALSE if and only if both conditions FALSE(0) else it will      return TRUE(1) EX:- 6 || 0

                - NOT(!) - It will give OPPOSITE result EX:- !(44 && 9)

      iii) RELATIONAL - (COMPARE OPETATOR) > >= < <= == !=

      iv) ASSIGNMENT - (=) it assign value to any variable.

      v) UNARY OPERATOR - It requies only one operant to perform any operation. There are two types of UNARY OPERATOR 

           INCRIMENT(++)
               POST FIX - a++
               PRE FIX - ++a

           DECREMENT(--)
               POST FIX - a--
               PRE FIX - --a
      vi) BITWISE OPERATOR - There are 6 types of BITWISE OPERATOR
             1) &(AND)
             2) !(OR)
             3) ^(Xor)
             4) ~(NEGATION)
             5) <<(LEFT SHIFT)
             6) >>(RIGHT SHIFT)

      vii) TERNARY OPERATOR -  It is a shortcut method of if-else. In a ternary operator we use 2 symbols (?) and (:). If the condition is true it will take ontrue value which comes after question mark and in false condition it will take onfalse value which comes after colon(:)

                 Syntax - CONDITION ? TRUE(1) : FALSE(0)

                 Ex:- {
                  int age;
                  cout<<"enter age\n";
                  cin>>age;
                  cout<<(age>=18)?"eligiable":"not";
                 }

      viii) SPECIAL OPERATOR -
        :: (SCOPE RESOLUTION OPERATOR)- It is used to excess any global varialbe or function in side a main fucntion.
        
                  example-      int a=34 //golbal
                                main(){
                                a=90; //local
                                cout<<::a;
                                }


      * TYPECASTING - To vonvert the behaviour of one datatype into another datatype is called TYPECASTING

                 ==============CONTROL FLOW STATEMENT==============
                            
        There are three types of CONTROL FLOw STATEMENT

           i)CONDITION STATEMENT
                1) SINGLE (if)
                2) BI (if-else)
                3) LADDER
                4) NESTED

          ii) SWITCH JUMPING STATEMENT
                1) goto
                2) break
                3) switch

          iii) LOOP STATEMENT
                1) Do While
                2) While
                3) For


      NESTED IF :- Nested condition is also called inner condition . Here we use mltiple "if" inside the condition

                 SYNTAX :- 
                   if(condition)
                    {
                           if(condition)
                            {

                            }
                            else
                            {

                            }
                    }

                    else
                    {

                    }

      LADDER IF :- It is also called OUTER condition , where we use multiple "else if" condition
      SYNTAX :-
      if(condition)
      {
            statement;
      }

      else if(condition)
      {
            statement;
      }

      else if(condition)
      {
            statement;
      }

      else
      {
            statement;
      }

      TRANSFER STATEMENT :- 

      i) goto - Goto is a label . we can use label by using goto keyword. we declare a label with colon (:)

      SYNTAX :-  goto labelname;
                  -------
                  -------
                 labelname :

===============WRITE A PROGRAM TO PRINT THE TABLE OF ANY NUMBER USING GOTO STATEMENT===============

      ii) SWITCH CASE :- It is used for either menu based programming or choice based programming.
      
      SYNTAX :-
      switch()
      {
            case variable:
            {
                  statement;
                  break;
            }

             case variable:
            {
                  statement;
                  break;
            }
            .
            .
            .
            .
            .
            .
            .
            .
            .
            .
            .
            .
            .
            default:
            {
                  statement;
                  break;
            }
      }
*/










      




                
